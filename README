============================================
libtorque, a multithreaded I/O event library
Copyright © 2009 Nick Black <dank@qemfd.net>
Render this document with fixed-width fonts.
============================================

----------------------------------------------------------------libtorque-----
-=+ I. Resources +=-
----------------------------------------------------------------libtorque-----

Wiki - http://dank.qemfd.net/dankwiki/index.php/Libtorque
GitHub project page - http://github.com/dankamongmen/libtorque
Bugzilla - http://dank.qemfd.net/bugzilla/buglist.cgi?product=libtorque

Download libtorque via 'git clone git://github.com/dankamongmen/libtorque.git'.

The original proposal for libtorque is available at:
 http://dank.qemfd.net/tabpower/cse6230proposal.pdf

libtorque is licensed under version 3 of the GNU Lesser General Public License:
 http://www.gnu.org/licenses/lgpl.html
A copy can be found in the toplevel file LICENSE.

----------------------------------------------------------------libtorque-----
-=+ II. Building libtorque +=-
----------------------------------------------------------------libtorque-----

libtorque does not employ the GNU autoconf tools, but is reliant upon GNU Make
and the GNU Compiler Collection. gcc is tracked quite closely, and only recent
versions might be supported at any time; 4.3 is the minimum gcc version
explicitly supported or recommended.

Environment variables can affect the build by overriding defaults, including:

 PREFIX (Installation prefix. Default: /usr/local)
 CC (C compiler executable. Default: gcc-4.4 (Linux), gcc44 (FreeBSD))

Changing these environment variables ought be followed by the 'clean' target;
this is one of the very few times the 'clean' target must be used.

On Linux, the GNU C Library is required, using the NPTL threading
implementation.

On FreeBSD, only the libthr threading implementation is explicitly supported or
recommended. If rebuilding world, ensure NO_LIBTHR is not active in make.conf.
Bind libpthread references to libthr via the following /etc/libmap.conf:

	libpthread.so.2         libthr.so.2
	libpthread.so           libthr.so

If using a 32-bit version of the library on a 64-bit system, place these same
lines in /etc/libmap32.conf. The mapping may be restricted to libtorque if
necessary (the authors recommend general use of the libthr implementation).

By default, libtorque is built optimizing for the buildhost's µ-architecture
and ISA, using gcc 4.3's "native" option to -march and -mtune. If you don't
have gcc 4.3 or greater, you'll need to define appropriate march and mtune
values for your system (see gcc's "Submodel Options" info page). Libraries
intended to be run on arbitrary x86 hardware must be built with MARCH 
explicitly defined as "generic", and MTUNE unset. The resulting libraries will
be wretchedly suboptimal on the vast majority of x86 processors.

From the toplevel, invoke GNU make. On Linux, 'make' is almost always GNU make.
On FreeBSD, the devel/gmake Port supplies GNU make as 'gmake'. This will build
the libtorque library, and run the supplied unit tests. Unit test failures are
promoted to full build failures. The install target can then be run to install
the library.

Note: The 'install' target depends on unit testing targets, and thus will not
install a known-unsafe library. This might be undesirable when hacking on the
library, and testing with another application. The 'unsafe-install' target is
provided to facilitate such operation. Its use is not typically recommended.

The 'deinstall' target will remove the files installed by that version of
libtorque (it cannot remove files installed only by previous versions). Since
libtorque does not install any active configuration files, use of 'deinstall'
is thus recommended prior to updating and rebuilding libtorque. Non-existence
of files is not considered an error by the 'deinstall' target.

libtorque can be brought up to date via 'git pull'. The 'clean' target ought
never be necessary to run, save when hacking on the build process itself (or
changing build parameters, as noted above).
