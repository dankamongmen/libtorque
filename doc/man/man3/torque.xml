<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!ENTITY dhfirstname "Nick">
<!ENTITY dhsurname   "Black">
<!ENTITY dhemail     "dank@qemfd.net">
<!ENTITY dhusername  "&dhfirstname; &dhsurname;">

<!ENTITY dhrelease   "0.0.1">

<!-- TITLE should be something like "User commands",           -->
<!-- "&dhpackage; command-line reference" or similar (see e.g. -->
<!-- http://www.tldp.org/HOWTO/Man-Page/q2.html). But limit    -->
<!-- the length to 30 chars.                                   -->
<!ENTITY dhtitle     "libtorque API summary">
  
<!-- This is the application/package name.                     -->
<!ENTITY dhucpackage "LIBTORQUE">
<!ENTITY dhpackage   "torque">

<!-- If the application e.g. belongs to a package like X.org,  -->
<!-- this should be set to the package/suite name instead of   -->
<!-- dhpackage.                                                -->
<!ENTITY dhproduct   "&dhpackage;">

<!-- SECTION should be 1-8, maybe w/ subsection other          -->
<!-- parameters are allowed: see man(7), man(1) and            -->
<!-- http://www.tldp.org/HOWTO/Man-Page/q2.html.               -->
<!ENTITY dhsection   "3torque">

]>

<refentry>
	<refentryinfo>
		<title>&dhtitle;</title>
		<!-- Better put a suite name instead of &dhpackage; into productname -->
		<productname>&dhproduct;</productname>
		<releaseinfo role="version">&dhrelease;</releaseinfo>
		<authorgroup>
			<author>
				<firstname>&dhfirstname;</firstname>
				<surname>&dhsurname;</surname>
				<contrib>Design and implementation.</contrib>
				<address>
					<email>&dhemail;</email>
				</address>
			</author>
		</authorgroup>
		<copyright>
			<year>2009-2021</year>
			<holder>&dhusername;</holder>
		</copyright>
	</refentryinfo>
	<refmeta>
		<refentrytitle>&dhucpackage;</refentrytitle>
		<manvolnum>&dhsection;</manvolnum>
	</refmeta>
	<refnamediv>
		<refname>&dhpackage;</refname>
		<refpurpose>High-performance I/O and primitives</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
		<funcsynopsis>
			<funcsynopsisinfo>#include &lt;libtorque/torque.h&gt;</funcsynopsisinfo>
			<funcprototype>
			<funcdef>struct torque_ctx *<function>torque_init</function></funcdef>
			<paramdef>torque_err *<parameter>e</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_addfd</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			<paramdef>int <parameter>fd</parameter></paramdef>
			<paramdef>libtorquercb <parameter>rcbfxn</parameter></paramdef>
			<paramdef>libtorquewcb <parameter>wcbfxn</parameter></paramdef>
			<paramdef>void *<parameter>cbstate</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_addfd_unbuffered</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			<paramdef>int <parameter>fd</parameter></paramdef>
			<paramdef>libtorquercb <parameter>rcbfxn</parameter></paramdef>
			<paramdef>libtorquewcb <parameter>wcbfxn</parameter></paramdef>
			<paramdef>void *<parameter>cbstate</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_addconnector</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			<paramdef>int <parameter>fd</parameter></paramdef>
			<paramdef>const struct sockaddr *<parameter>addr</parameter></paramdef>
			<paramdef>socklen_t <parameter>sockaddr</parameter></paramdef>
			<paramdef>libtorquercb <parameter>rcbfxn</parameter></paramdef>
			<paramdef>libtorquewcb <parameter>wcbfxn</parameter></paramdef>
			<paramdef>void *<parameter>cbstate</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_addconnector_unbuffered</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			<paramdef>int <parameter>fd</parameter></paramdef>
			<paramdef>const struct sockaddr *<parameter>addr</parameter></paramdef>
			<paramdef>socklen_t <parameter>sockaddr</parameter></paramdef>
			<paramdef>libtorquercb <parameter>rcbfxn</parameter></paramdef>
			<paramdef>libtorquewcb <parameter>wcbfxn</parameter></paramdef>
			<paramdef>void *<parameter>cbstate</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_addsignal</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			<paramdef>const sigset_t *<parameter>ss</parameter></paramdef>
			<paramdef>libtorquercb <parameter>cbfxn</parameter></paramdef>
			<paramdef>void *<parameter>cbstate</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_addpath</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			<paramdef>const char *<parameter>path</parameter></paramdef>
			<paramdef>libtorquercb <parameter>cbfxn</parameter></paramdef>
			<paramdef>void *<parameter>cbstate</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_addtimer</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			<paramdef>const struct itimerspec *<parameter>it</parameter></paramdef>
			<paramdef>libtorquercb <parameter>cbfxn</parameter></paramdef>
			<paramdef>void *<parameter>cbstate</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_addssl</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			<paramdef>int <parameter>sd</parameter></paramdef>
			<paramdef>SSL_CTX *<parameter>sctx</parameter></paramdef>
			<paramdef>libtorquercb <parameter>rcbfxn</parameter></paramdef>
			<paramdef>libtorquewcb <parameter>wcbfxn</parameter></paramdef>
			<paramdef>void *<parameter>cbstate</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_block</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>torque_err <function>torque_stop</function></funcdef>
			<paramdef>struct torque_ctx *<parameter>ctx</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>const char *<function>torque_errstr</function></funcdef>
			<paramdef>torque_err <parameter>e</parameter></paramdef>
			</funcprototype>
		</funcsynopsis>
		<funcsynopsis>
			<funcprototype>
			<funcdef>const char *<function>torque_version</function></funcdef>
			<void/>
			</funcprototype>
		</funcsynopsis>
	</refsynopsisdiv>
	<refsect1 id="description">
		<title>DESCRIPTION</title>
		<para><command>&dhpackage;</command> provides the tools
			necessary for cross-platform high-performance computing
			and I/O via continuations, scaling from single
			processors to manycore NUMA architectures. This
			includes discovery of processing elements, memories,
			and topology, multithreaded use of edge-triggered,
			scalable event notification, unification of event
			sources, advanced scheduling based on
			architecture-aware allocator, and sophisticated
			buffering.</para>
		<para>Consult torque.h for full details.</para>
	</refsect1>
	<refsect1 id="bugs">
		<title>BUGS</title>
		<para>Search <ulink url="https://nick-black.com/bugzilla/buglist.cgi?product=libtorque"/>.
		Mail bug reports and/or patches to the authors.</para>
	</refsect1>
	<refsect1 id="see_also">
		<title>SEE ALSO</title>
		<para> <!-- In alphabetical order. -->
			<citerefentry>
				<refentrytitle>madvise</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>mincore</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>mmap</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>mprotect</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>posix_memalign</refentrytitle>
				<manvolnum>3</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>sendfile</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>sigaction</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>
		</para>
		<para>On Linux:
			<citerefentry>
				<refentrytitle>aio</refentrytitle>
				<manvolnum>3</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>CPU_SET</refentrytitle>
				<manvolnum>3</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>epoll</refentrytitle>
				<manvolnum>4</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>libcpuset</refentrytitle>
				<manvolnum>3</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>numa</refentrytitle>
				<manvolnum>3</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>numa</refentrytitle>
				<manvolnum>7</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>pthreads</refentrytitle>
				<manvolnum>7</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>sched_getaffinity</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>sched_setaffinity</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>signalfd</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>splice</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>timerfd_create</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>
		</para>
		<para>On FreeBSD:
		       	<citerefentry>
				<refentrytitle>aio</refentrytitle>
				<manvolnum>4</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>cpuset_getaffinity</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>cpuset_setaffinity</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>kqueue</refentrytitle>
				<manvolnum>2</manvolnum>
			</citerefentry>, <citerefentry>
				<refentrytitle>pthread</refentrytitle>
				<manvolnum>3</manvolnum>
			</citerefentry>
		</para>
		<para>GitHub: <ulink url="https://nick-black.com/dankwiki/index.php/Libtorque"/></para>
		<para>Project wiki: <ulink url="http://github.com/dankamongmen/libtorque"/></para>
	</refsect1>
</refentry>
